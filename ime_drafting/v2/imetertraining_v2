import argparse
import imelib2

#Command Line Input
userin = argparse.ArgumentParser(description='IMEter version 2.0 training')
userin.add_argument('--infile', type=str, metavar='<file>',
	help='intron file, formatted like at_ime_master.txt.gz')
userin.add_argument('--don', type=int, metavar='<int>', required=False,
	default=5, help='length of splice donor site [%(default)i]')
userin.add_argument('--acc', type=int, metavar='<int>', required=False,
	default=10, help='length of splice acceptor site [%(default)i]')
userin.add_argument('--cutoff', type=int, metavar='<int>', required=False,
	default=400, help='proximal/distal cutoff [%(default)i]')
userin.add_argument('--k', type=int, metavar='<int>', required=False,
	default=5, help='size of kmer [%(default)i]')
userin.add_argument('--sig', type=int, metavar='<int>', required=False,
	default=500, help='cutoff for decaying kmer significant [%(default)i]')
userin.add_argument('--outfile', type=str, metavar='<file>', required=False,
	default=None, help='name of .model file. Otherwise will print to STDOUT')

args = userin.parse_args()

records = imelib2.readintfile(args.infile)

imeter, pfreqs, dfreqs = imelib2.train_imeter2(records, cut=args.cutoff,
	k=args.k, a=args.acc, d=args.don, sig=args.sig)

if args.outfile is None:
	print('kmer,score,proximalfreq,distalfreq')
	for kmer in imeter:
		print(kmer, imeter[kmer], pfreqs[kmer], dfreqs[kmer])
else:
	file = open(args.outfile, "w")
	file.write(f'$ kmers,score,proximalfreq,distalfreq\n')
	for kmer in imeter:
		file.write(f'{kmer} {imeter[kmer]} {pfreqs[kmer]} {dfreqs[kmer]}\n')
	file.close()
